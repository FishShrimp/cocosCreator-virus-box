// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        iResolution: { value: [1280, 720] }
        time: { value: 1 }
        colorR: { value: 1 }          // RGBA颜色
        colorG: { value: 1 }
        colorB: { value: 1 }
        colorA: { value: 1 }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
    precision highp float;
    in vec4 v_color; // 直接修改颜色 -- 重要

    uniform sampler2D texture;
    varying vec2 v_uv0;
    uniform properties {
        vec2 iResolution;
        float time;
        float colorR;
        float colorG;
        float colorB;
        float colorA;
    };
    #define F cos(x-y)*cos(y),sin(x+y)*sin(y)
    
    vec2 s(vec2 p)
    {
        float d=time*0.2,x=8.*(p.x+d),y=8.*(p.y+d);   // 这里好像是修改波纹频率的
        return vec2(F);
    }
    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        // 换成resolution
        vec2 rs = iResolution.xy;
        // 换成纹理坐标v_texCoord.xy
        vec2 uv = fragCoord;
        vec2 q = uv+10./iResolution.x*(s(uv)-s(uv+rs));  // 这里可以修改波纹扭曲程度

        //反转y
        //q.y=1.-q.y;
        // 修改颜色1：
        // fragColor = vec4(1,0,0,1) * texture2D(texture, q);  
        // 修改颜色2：使用 colorR / 255.0 除法整数必须要加.0  根据编辑器手动传入colorR... 值修改
        // fragColor = vec4(colorR / 255.0,colorG / 255.0,colorB / 255.0,colorA / 255.0) * texture2D(texture, q);  // vec4(colorR,colorG,colorB,colorA)这里可以修改颜色
        // 修改颜色3：写法参考的是Dissolve.effect文件
        fragColor = v_color * texture2D(texture, q); // 这种写法可以直接修改根据node修改精灵图的颜色
    }

    void main()
    {
        mainImage(gl_FragColor, v_uv0.xy);
    }
}%
